treeModel <- C5.0(x=Aids2[,-6], y=Aids2$T.categ)
treeModel
summary(treeModel)
plot(treeModel)
library("C50")
library("MASS")
data("OME")
head(OME)
treeModel <- C5.0(x=OME[,-6], y=OME$Noise)
treeModel
summary(treeModel)
plot(treeModel)
library("C50")
library("MASS")
data("OME")
head(OME)
treeModel <- C5.0(x=OME[,-6], y=OME)
treeModel
summary(treeModel)
plot(treeModel)
library("C50")
library("MASS")
data("OME")
head(OME)
treeModel <- C5.0(x=OME[,-6], y=OME$ID)
treeModel
summary(treeModel)
plot(treeModel)
library("C50")
library("MASS")
data("OME")
head(OME)
treeModel <- C5.0(x=OME[,-6], y=OME$Age)
treeModel
summary(treeModel)
plot(treeModel)
library("C50")
library("MASS")
data("OME")
head(OME)
treeModel <- C5.0(x=OME[,-6], y=OME$OME)
treeModel
summary(treeModel)
plot(treeModel)
library("C50")
library("MASS")
data("OME")
head(OME)
treeModel <- C5.0(x=OME[,-6], y=OME$Loud)
treeModel
summary(treeModel)
plot(treeModel)
library("C50")
library("MASS")
data("OME")
head(OME)
treeModel <- C5.0(x=OME[,-6], y=OME$Correct)
treeModel
summary(treeModel)
plot(treeModel)
library("C50")
library("MASS")
data("OME")
head(OME)
treeModel <- C5.0(x=OME[,-6], y=OME$Trials)
treeModel
summary(treeModel)
plot(treeModel)
library("C50")
library("MASS")
data("OME")
head(OME)
treeModel <- C5.0(x=OME[,-6], y=OME$Noise)
treeModel
summary(treeModel)
plot(treeModel)
library("C50")
library("MASS")
data(Aids2)
head(Aids2)
treeModel <- C5.0(x=Aids2[,-6], y=Aids2$T.categ)
treeModel
summary(treeModel)
plot(treeModel)
library("C50")
library("MASS")
data(Aids2)
head(Aids2)
treeModel <- C5.0(x=Aids2[,-10], y=Aids2$T.categ)
treeModel
summary(treeModel)
plot(treeModel)
library("C50")
library("MASS")
data(Aids2)
head(Aids2)
treeModel <- C5.0(x=Aids2[,-5], y=Aids2$T.categ)
treeModel
summary(treeModel)
plot(treeModel)
library("C50")
library("MASS")
data(Aids2)
head(Aids2)
treeModel <- C5.0(x=Aids2[,-6], y=Aids2$T.categ)
treeModel
summary(treeModel)
plot(treeModel)
library("C50")
library("MASS")
data(Aids2)
head(Aids2)
treeModel <- C5.0(x=Aids2[,-7], y=Aids2$T.categ)
treeModel
summary(treeModel)
plot(treeModel)
library("C50")
library("MASS")
data(Aids2)
head(Aids2)
treeModel <- C5.0(x=Aids2[,-6], y=Aids2$T.categ)
treeModel
summary(treeModel)
plot(treeModel)
library("C50")
library("MASS")
data("OME")
head(OME)
treeModel <- C5.0(x=OME[,-6], y=OME$Noise)
treeModel
summary(treeModel)
plot(treeModel)
library("C50")
library("MASS")
data("OME")
head(OME)
treeModel <- C5.0(x=OME[,-2], y=OME$Noise)
treeModel
summary(treeModel)
plot(treeModel)
library("C50")
library("MASS")
data("OME")
head(OME)
treeModel <- C5.0(x=OME[,-3], y=OME$Noise)
treeModel
summary(treeModel)
plot(treeModel)
library("C50")
library("MASS")
data("OME")
head(OME)
treeModel <- C5.0(x=OME[,-4], y=OME$Noise)
treeModel
summary(treeModel)
plot(treeModel)
library("C50")
library("MASS")
data("OME")
head(OME)
treeModel <- C5.0(x=OME[,-5], y=OME$Noise)
treeModel
summary(treeModel)
plot(treeModel)
library("C50")
library("MASS")
data("OME")
head(OME)
treeModel <- C5.0(x=OME[,-6], y=OME$Noise)
treeModel
summary(treeModel)
plot(treeModel)
library("C50")
library("MASS")
data("OME")
head(OME)
treeModel <- C5.0(x=OME[,-7], y=OME$Noise)
treeModel
summary(treeModel)
plot(treeModel)
library("C50")
library("MASS")
data("OME")
head(OME)
treeModel <- C5.0(x=OME[,-8], y=OME$Noise)
treeModel
summary(treeModel)
plot(treeModel)
library("C50")
library("MASS")
data("OME")
head(OME)
treeModel <- C5.0(x=OME[,-9], y=OME$Noise)
treeModel
summary(treeModel)
plot(treeModel)
library("C50")
library("MASS")
data("OME")
head(OME)
treeModel <- C5.0(x=OME[,-10], y=OME$Noise)
treeModel
summary(treeModel)
plot(treeModel)
library("C50")
library("MASS")
data("OME")
head(OME)
treeModel <- C5.0(x=OME[,-11], y=OME$Noise)
treeModel
summary(treeModel)
plot(treeModel)
library("C50")
library("MASS")
data("OME")
head(OME)
treeModel <- C5.0(x=OME[,-12], y=OME$Noise)
treeModel
summary(treeModel)
plot(treeModel)
library("C50")
library("MASS")
data("OME")
head(OME)
treeModel <- C5.0(x=OME[,-13], y=OME$Noise)
treeModel
summary(treeModel)
plot(treeModel)
library("C50")
library("MASS")
data("OME")
head(OME)
treeModel <- C5.0(x=OME[,-100], y=OME$Noise)
treeModel
summary(treeModel)
plot(treeModel)
library("C50")
library("MASS")
data("OME")
head(OME)
treeModel <- C5.0(x=OME[,-500], y=OME$Noise)
treeModel
summary(treeModel)
plot(treeModel)
library("C50")
library("MASS")
data("OME")
head(OME)
treeModel <- C5.0(x=OME[,-500], y=OME$OME)
treeModel
summary(treeModel)
plot(treeModel)
library("C50")
library("MASS")
data("OME")
head(OME)
treeModel <- C5.0(x=OME[,-1], y=OME$OME)
treeModel
summary(treeModel)
plot(treeModel)
library("C50")
library("MASS")
data("OME")
head(OME)
treeModel <- C5.0(x=OME[,-2], y=OME$OME)
treeModel
summary(treeModel)
plot(treeModel)
library("C50")
library("MASS")
data("OME")
head(OME)
treeModel <- C5.0(x=OME[,-3], y=OME$OME)
treeModel
summary(treeModel)
plot(treeModel)
library("C50")
library("MASS")
data("OME")
head(OME)
treeModel <- C5.0(x=OME[,-4], y=OME$OME)
treeModel
summary(treeModel)
plot(treeModel)
library("C50")
library("MASS")
data("OME")
head(OME)
treeModel <- C5.0(x=OME[,-5], y=OME$OME)
treeModel
summary(treeModel)
plot(treeModel)
library("C50")
library("MASS")
data("OME")
head(OME)
treeModel <- C5.0(x=OME[,-6], y=OME$OME)
treeModel
summary(treeModel)
plot(treeModel)
library("C50")
library("MASS")
data("OME")
head(OME)
treeModel <- C5.0(x=OME[,-3], y=OME$OME)
treeModel
summary(treeModel)
plot(treeModel)
library("C50")
library("MASS")
data("OME")
head(OME)
treeModel <- C5.0(x=OME[,-3], y=OME$OME)
treeModel
summary(treeModel)
plot(treeModel)
library("C50")
library("MASS")
data("OME")
head(OME)
treeModel <- C5.0(x=OME[,-3], y=OME$OME)
treeModel
summary(treeModel)
plot(treeModel)
library("C50")
library("MASS")
data("OME")
head(OME)
treeModel <- C5.0(x=OME[,-3], y=OME$OME)
treeModel
summary(treeModel)
plot(treeModel)
library("C50")
library("MASS")
data("OME")
head(OME)
treeModel <- C5.0(x=OME[,-3], y=OME$OME)
treeModel
summary(treeModel)
plot(treeModel)
library("C50")
library("MASS")
data("OME")
head(OME)
treeModel <- C5.0(x=OME[,-3], y=OME$OME)
treeModel
summary(treeModel)
plot(treeModel)
library("mlr")
library("DiscriMiner")
library("rFerns")
library("randomForestSRC")
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
setwd("C:/Users/Hp/Desktop/Studia magisterka/Uczenie maszynowe/Zadanie 5.2")
data <- read.csv("smartfony.csv")
data$ocena_klientow<-factor(data$ocena_klientow)
data$wyswietlacz<-normalize(data$wyswietlacz)
data$pamie_RAM<-normalize(data$pamie_RAM)
data$pamie_wbudowana<-normalize(data$pamie_wbudowana)
data<-data.frame(data)
zadanie = makeClassifTask(id = 'smartfony',
data,
"ocena_klientow",
weights = NULL,
blocking = NULL,
coordinates = NULL,
positive = NA_character_,
fixup.data = "warn",
check.data = TRUE)
ponowne_probkowanie = makeResampleDesc("Bootstrap", iters = 3)
metody_uczenia <- makeLearners(c("rpart", "C50","rFerns","randomForestSRC"), type = "classif")
porownanie_metod_uczenia <- benchmark(learners = metody_uczenia,
tasks = zadanie,
resampling = ponowne_probkowanie)
library("mlr")
library("DiscriMiner")
library("rFerns")
library("randomForestSRC")
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
setwd("C:/Users/Hp/Desktop/Studia magisterka/Uczenie maszynowe/Zadanie 5.2")
data <- read.csv("smartfony.csv")
data$ocena_klientow<-factor(data$ocena_klientow)
data$wyswietlacz<-normalize(data$wyswietlacz)
data$pamie_RAM<-normalize(data$pamie_RAM)
data$pamie_wbudowana<-normalize(data$pamie_wbudowana)
data<-data.frame(data)
zadanie = makeClassifTask(id = 'smartfony',
data,
"ocena_klientow",
weights = NULL,
blocking = NULL,
coordinates = NULL,
positive = NA_character_,
fixup.data = "warn",
check.data = TRUE)
ponowne_probkowanie = makeResampleDesc("Bootstrap", iters = 3)
metody_uczenia <- makeLearners(c("rpart", "C50","rFerns","randomForestSRC"), type = "classif")
porownanie_metod_uczenia <- benchmark(learners = metody_uczenia,
tasks = zadanie,
resampling = ponowne_probkowanie)
library("mlr")
library("DiscriMiner")
library("rFerns")
library("randomForestSRC")
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
setwd("C:/Users/Hp/Desktop/Studia magisterka/Uczenie maszynowe/Zadanie 5.2")
data <- read.csv("smartfony.csv")
data$ocena_klientow<-factor(data$ocena_klientow)
data$wyswietlacz<-normalize(data$wyswietlacz)
data$pamie_RAM<-normalize(data$pamie_RAM)
data$pamie_wbudowana<-normalize(data$pamie_wbudowana)
data<-data.frame(data)
zadanie = makeClassifTask(id = 'smartfony',
data,
"ocena_klientow",
weights = NULL,
blocking = NULL,
coordinates = NULL,
positive = NA_character_,
fixup.data = "warn",
check.data = TRUE)
ponowne_probkowanie = makeResampleDesc("Bootstrap", iters = 3)
metody_uczenia <- makeLearners(c("rpart", "C50","rFerns","randomForestSRC"), type = "classif")
porownanie_metod_uczenia <- benchmark(learners = metody_uczenia,
tasks = zadanie,
resampling = ponowne_probkowanie)
library("mlr")
library("DiscriMiner")
library("rFerns")
library("randomForestSRC")
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
setwd("C:/Users/Hp/Desktop/Studia magisterka/Uczenie maszynowe/Zadanie 5.2")
data <- read.csv("smartfony.csv")
data$ocena_klientow<-factor(data$ocena_klientow)
data$pamie_RAM<-normalize(data$pamie_RAM)
data$pamie_wbudowana<-normalize(data$pamie_wbudowana)
data<-data.frame(data)
zadanie = makeClassifTask(id = 'smartfony',
data,
"ocena_klientow",
weights = NULL,
blocking = NULL,
coordinates = NULL,
positive = NA_character_,
fixup.data = "warn",
check.data = TRUE)
ponowne_probkowanie = makeResampleDesc("Bootstrap", iters = 3)
metody_uczenia <- makeLearners(c("rpart", "C50","rFerns","randomForestSRC"), type = "classif")
porownanie_metod_uczenia <- benchmark(learners = metody_uczenia,
tasks = zadanie,
resampling = ponowne_probkowanie)
library("mlr")
library("DiscriMiner")
library("rFerns")
library("randomForestSRC")
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
setwd("C:/Users/Hp/Desktop/Studia magisterka/Uczenie maszynowe/Zadanie 5.2")
data <- read.csv("smartfony.csv")
data$ocena_klientow<-factor(data$ocena_klientow)
data$pamie_RAM<-normalize(data$pamie_RAM)
data<-data.frame(data)
zadanie = makeClassifTask(id = 'smartfony',
data,
"ocena_klientow",
weights = NULL,
blocking = NULL,
coordinates = NULL,
positive = NA_character_,
fixup.data = "warn",
check.data = TRUE)
ponowne_probkowanie = makeResampleDesc("Bootstrap", iters = 3)
metody_uczenia <- makeLearners(c("rpart", "C50","rFerns","randomForestSRC"), type = "classif")
porownanie_metod_uczenia <- benchmark(learners = metody_uczenia,
tasks = zadanie,
resampling = ponowne_probkowanie)
library("mlr")
library("DiscriMiner")
library("rFerns")
library("randomForestSRC")
normalize <- function(x) {
return ((x - min(x)) / (max(x) - min(x)))
}
setwd("C:/Users/Hp/Desktop/Studia magisterka/Uczenie maszynowe/Zadanie 5.2")
data <- read.csv("smartfony.csv")
data$ocena_klientow<-factor(data$ocena_klientow)
data$pamie_RAM<-normalize(data$pamie_RAM)
data$pamie_wbudowana<-normalize(data$pamie_wbudowana)
data<-data.frame(data)
zadanie = makeClassifTask(id = 'smartfony',
data,
"ocena_klientow",
weights = NULL,
blocking = NULL,
coordinates = NULL,
positive = NA_character_,
fixup.data = "warn",
check.data = TRUE)
ponowne_probkowanie = makeResampleDesc("Bootstrap", iters = 3)
metody_uczenia <- makeLearners(c("rpart", "C50","rFerns","randomForestSRC"), type = "classif")
porownanie_metod_uczenia <- benchmark(learners = metody_uczenia,
tasks = zadanie,
resampling = ponowne_probkowanie)
